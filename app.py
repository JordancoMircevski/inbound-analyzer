import streamlit as st
import pandas as pd
import re
from io import BytesIO

# –à–∞–∑–∏–∫
language = st.sidebar.selectbox("–à–∞–∑–∏–∫ / Language", ["–ú–∞–∫–µ–¥–æ–Ω—Å–∫–∏", "English"])

texts = {
    "title": {
        "–ú–∞–∫–µ–¥–æ–Ω—Å–∫–∏": "üìû –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–Ω–µ—Å–µ–Ω–∏ –ø—Ä–æ–ø—É—à—Ç–µ–Ω–∏ –ø–æ–≤–∏—Ü–∏",
        "English": "üìû Missed Calls System Check"
    },
    "upload": {
        "–ú–∞–∫–µ–¥–æ–Ω—Å–∫–∏": "‚¨ÜÔ∏è –ü—Ä–∏–∫–∞—á–∏ –≥–∏ Excel —Ñ–∞—ò–ª–æ–≤–∏—Ç–µ: Inbound, Outbound, Catpro",
        "English": "‚¨ÜÔ∏è Upload Inbound, Outbound, and Catpro Excel files"
    },
    "inbound": {"–ú–∞–∫–µ–¥–æ–Ω—Å–∫–∏": "üì• Inbound", "English": "üì• Inbound"},
    "outbound": {"–ú–∞–∫–µ–¥–æ–Ω—Å–∫–∏": "üì§ Outbound", "English": "üì§ Outbound"},
    "catpro": {"–ú–∞–∫–µ–¥–æ–Ω—Å–∫–∏": "üìä Catpro", "English": "üìä Catpro"},
    "count": {
        "–ú–∞–∫–µ–¥–æ–Ω—Å–∫–∏": "üìâ –í–∫—É–ø–Ω–æ {count} –ø—Ä–æ–ø—É—à—Ç–µ–Ω–∏ –±—Ä–æ–µ–≤–∏:",
        "English": "üìâ Total {count} missed numbers:"
    },
    "download": {"–ú–∞–∫–µ–¥–æ–Ω—Å–∫–∏": "‚¨áÔ∏è –ü—Ä–µ–∑–µ–º–∏ Excel", "English": "‚¨áÔ∏è Download Excel"},
    "info": {
        "–ú–∞–∫–µ–¥–æ–Ω—Å–∫–∏": "üìÇ –ü—Ä–∏–∫–∞—á–∏ –≥–∏ —Å–∏—Ç–µ —Ç—Ä–∏ —Ñ–∞—ò–ª–∞ –∑–∞ –¥–∞ –∑–∞–ø–æ—á–Ω–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–∞.",
        "English": "üìÇ Please upload all three files to start the analysis."
    }
}

st.set_page_config(page_title=texts["title"][language], layout="wide")
st.title(texts["title"][language])
st.markdown(texts["upload"][language])

# Upload –Ω–∞ —Ñ–∞—ò–ª–æ–≤–∏—Ç–µ
inbound_file = st.sidebar.file_uploader(texts["inbound"][language], type=["xlsx"])
outbound_file = st.sidebar.file_uploader(texts["outbound"][language], type=["xlsx"])
catpro_file = st.sidebar.file_uploader(texts["catpro"][language], type=["xlsx"])

# –§—É–Ω–∫—Ü–∏—ò–∞ –∑–∞ —á–∏—Å—Ç–µ—ö–µ –±—Ä–æ–µ–≤–∏
def clean_number(number):
    if pd.isna(number):
        return ""
    number = str(number)
    number = re.sub(r"[^\d]", "", number)
    if number.startswith("00389"):
        number = number[5:]
    elif number.startswith("389"):
        number = number[3:]
    elif number.startswith("0"):
        number = number[1:]
    return number

if inbound_file and outbound_file and catpro_file:
    # –ß–∏—Ç–∞—ö–µ –Ω–∞ —Ñ–∞—ò–ª–æ–≤–∏
    df_in = pd.read_excel(inbound_file)
    df_out = pd.read_excel(outbound_file)
    df_cat = pd.read_excel(catpro_file, header=1)

    # 1. –ß–∏—Å—Ç–µ—ö–µ –∏ –≥—Ä—É–ø–∏—Ä–∞—ö–µ –Ω–∞ inbound
    df_in['Cleaned Number'] = df_in['Original Caller Number'].apply(clean_number)
    df_in = df_in.sort_values('Start Time').drop_duplicates('Cleaned Number', keep='last')

    # 2. Outbound
    df_out['Cleaned Number'] = df_out['Callee Number'].apply(clean_number)

    # 3. Catpro
    df_cat['Cleaned GSM'] = df_cat['GSM'].apply(clean_number)

    # 4. –ü—Ä–æ–ø—É—à—Ç–µ–Ω–∏ –ø–æ–≤–∏—Ü–∏ = inbound —à—Ç–æ –≥–∏ –Ω–µ–º–∞ –≤–æ outbound
    missed = df_in[~df_in['Cleaned Number'].isin(df_out['Cleaned Number'])].copy()

    # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ –µ –≤–Ω–µ—Å–µ–Ω –≤–æ —Å–∏—Å—Ç–µ–º (–¥–∞–ª–∏ –≥–æ –∏–º–∞ –≤–æ Catpro)
    missed['Status'] = missed['Cleaned Number'].apply(
        lambda num: "‚úÖ –í–Ω–µ—Å–µ–Ω –≤–æ —Å–∏—Å—Ç–µ–º" if num in df_cat['Cleaned GSM'].values else "‚ùå –ù–ï –µ –≤–Ω–µ—Å–µ–Ω"
    )

    # –§–∏–Ω–∞–ª–Ω–∞ —Ç–∞–±–µ–ª–∞
    final_table = missed[[
        'Original Caller Number',
        'Start Time',
        'Source Trunk Name',
        'Status'
    ]].rename(columns={
        'Original Caller Number': 'Phone',
        'Start Time': 'Date',
        'Source Trunk Name': 'Trunk'
    })

    # –ü—Ä–∏–∫–∞–∑ –Ω–∞ —Ç–∞–±–µ–ª–∞—Ç–∞
    st.subheader(texts["count"][language].format(count=len(final_table)))
    st.dataframe(final_table)

    # Export –≤–æ Excel
    output = BytesIO()
    final_table.to_excel(output, index=False, engine='openpyxl')
    output.seek(0)

    st.download_button(
        label=texts["download"][language],
        data=output,
        file_name="missed_calls_status.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )

else:
    st.info(texts["info"][language])
