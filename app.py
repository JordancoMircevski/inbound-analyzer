import streamlit as st
import pandas as pd
import re
from io import BytesIO

# UI —ò–∞–∑–∏–∫
language = st.sidebar.selectbox("–à–∞–∑–∏–∫ / Language", ["–ú–∞–∫–µ–¥–æ–Ω—Å–∫–∏", "English"])

texts = {
    "title": {
        "–ú–∞–∫–µ–¥–æ–Ω—Å–∫–∏": "üìû –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ–ø—É—à—Ç–µ–Ω–∏ –ø–æ–≤–∏—Ü–∏",
        "English": "üìû Missed Calls System Check"
    },
    "upload": {
        "–ú–∞–∫–µ–¥–æ–Ω—Å–∫–∏": "‚¨ÜÔ∏è –ü—Ä–∏–∫–∞—á–∏ –≥–∏ Excel —Ñ–∞—ò–ª–æ–≤–∏—Ç–µ: Inbound, Outbound, Catpro",
        "English": "‚¨ÜÔ∏è Upload Inbound, Outbound, and Catpro Excel files"
    },
    "inbound": {"–ú–∞–∫–µ–¥–æ–Ω—Å–∫–∏": "üì• Inbound", "English": "üì• Inbound"},
    "outbound": {"–ú–∞–∫–µ–¥–æ–Ω—Å–∫–∏": "üì§ Outbound", "English": "üì§ Outbound"},
    "catpro": {"–ú–∞–∫–µ–¥–æ–Ω—Å–∫–∏": "üìä Catpro", "English": "üìä Catpro"},
    "count": {
        "–ú–∞–∫–µ–¥–æ–Ω—Å–∫–∏": "üìâ –í–∫—É–ø–Ω–æ {count} –ø—Ä–æ–ø—É—à—Ç–µ–Ω–∏ –±—Ä–æ–µ–≤–∏:",
        "English": "üìâ Total {count} missed numbers:"
    },
    "download": {"–ú–∞–∫–µ–¥–æ–Ω—Å–∫–∏": "‚¨áÔ∏è –ü—Ä–µ–∑–µ–º–∏ Excel", "English": "‚¨áÔ∏è Download Excel"},
    "info": {
        "–ú–∞–∫–µ–¥–æ–Ω—Å–∫–∏": "üìÇ –ü—Ä–∏–∫–∞—á–∏ –≥–∏ —Å–∏—Ç–µ —Ç—Ä–∏ —Ñ–∞—ò–ª–∞ –∑–∞ –¥–∞ –∑–∞–ø–æ—á–Ω–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–∞.",
        "English": "üìÇ Please upload all three files to start the analysis."
    },
    "filter_checkbox": {
        "–ú–∞–∫–µ–¥–æ–Ω—Å–∫–∏": "üîç –ü—Ä–∏–∫–∞–∂–∏ —Å–∞–º–æ –±—Ä–æ–µ–≤–∏ —à—Ç–æ –ù–ï —Å–µ –≤–Ω–µ—Å–µ–Ω–∏",
        "English": "üîç Show only numbers that are NOT entered"
    }
}

st.set_page_config(page_title=texts["title"][language], layout="wide")
st.title(texts["title"][language])
st.markdown(texts["upload"][language])

# –§—É–Ω–∫—Ü–∏—ò–∞ –∑–∞ —á–∏—Å—Ç–µ—ö–µ –±—Ä–æ–µ–≤–∏ –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å 389 –∏ –±–µ–∑ –≤–æ–¥–µ—á–∫–æ 0
def clean_number(number):
    if pd.isna(number):
        return ""
    number = str(number)
    number = re.sub(r"[^\d]", "", number)
    if number.startswith("00389"):
        number = number[5:]
    elif number.startswith("389"):
        number = number[3:]
    elif number.startswith("0"):
        number = number[1:]
    return number

if st.sidebar.file_uploader(texts["inbound"][language], type=["xlsx"]) and \
   st.sidebar.file_uploader(texts["outbound"][language], type=["xlsx"]) and \
   st.sidebar.file_uploader(texts["catpro"][language], type=["xlsx"]):

    # –ì–∏ –∑–µ–º–∞–º–µ —Ñ–∞—ò–ª–æ–≤–∏—Ç–µ –æ–¥ upload (–ø–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞ –¥–∞ –≥–∏ –∫–æ—Ä–∏—Å—Ç–∏–º–µ –ø–æ–¥–æ—Ü–Ω–∞)
    inbound_file = st.sidebar.file_uploader(texts["inbound"][language], type=["xlsx"])
    outbound_file = st.sidebar.file_uploader(texts["outbound"][language], type=["xlsx"])
    catpro_file = st.sidebar.file_uploader(texts["catpro"][language], type=["xlsx"])

    if inbound_file and outbound_file and catpro_file:
        df_in = pd.read_excel(inbound_file)
        df_out = pd.read_excel(outbound_file)
        df_cat = pd.read_excel(catpro_file, header=1)

        # –ß–∏—Å—Ç–µ—ö–µ –±—Ä–æ–µ–≤–∏
        df_in['Cleaned Number'] = df_in['Original Caller Number'].apply(clean_number)
        df_in = df_in.sort_values('Start Time').drop_duplicates('Cleaned Number', keep='last')

        df_out['Cleaned Number'] = df_out['Callee Number'].apply(clean_number)

        df_cat = df_cat[df_cat['GSM'].notna()]
        df_cat['Cleaned GSM'] = df_cat['GSM'].apply(clean_number)
        valid_gsm_set = set(df_cat['Cleaned GSM'].dropna())

        if 'Agent of insertion' in df_cat.columns:
            gsm_to_agent = df_cat.set_index('Cleaned GSM')['Agent of insertion'].to_dict()
        else:
            gsm_to_agent = {}

        missed = df_in[~df_in['Cleaned Number'].isin(df_out['Cleaned Number'])].copy()

        missed['Status'] = missed['Cleaned Number'].apply(
            lambda num: "‚úÖ –í–Ω–µ—Å–µ–Ω –≤–æ —Å–∏—Å—Ç–µ–º" if num in valid_gsm_set else "‚ùå –ù–ï –µ –≤–Ω–µ—Å–µ–Ω"
        )
        missed['Agent'] = missed['Cleaned Number'].apply(
            lambda num: gsm_to_agent.get(num, "") if num in valid_gsm_set else ""
        )

        final_table = missed[[
            'Cleaned Number',
            'Start Time',
            'Source Trunk Name',
            'Status',
            'Agent'
        ]].rename(columns={
            'Cleaned Number': 'Phone',
            'Start Time': 'Date',
            'Source Trunk Name': 'Trunk'
        })

        # –ü—Ä–∏–∫–∞–∂–∏ –±—Ä–æ–µ–≤–∏ –ë–ï–ó 0 –∏–ª–∏ 389 - —á–∏—Å—Ç–∏ –±—Ä–æ–µ–≤–∏
        # (–≤–µ—ú–µ —Å–µ —á–∏—Å—Ç–∞—Ç –≤–æ clean_number)

        show_only_missing = st.checkbox(texts["filter_checkbox"][language])
        filtered_table = final_table[final_table['Status'] == "‚ùå –ù–ï –µ –≤–Ω–µ—Å–µ–Ω"] if show_only_missing else final_table

        st.subheader(texts["count"][language].format(count=len(filtered_table)))
        st.dataframe(filtered_table)

        output = BytesIO()
        filtered_table.to_excel(output, index=False, engine='openpyxl')
        output.seek(0)

        st.download_button(
            label=texts["download"][language],
            data=output,
            file_name="missed_calls_status.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )
else:
    st.info(texts["info"][language])
