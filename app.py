import streamlit as st
import pandas as pd
import re
from io import BytesIO

# UI —ò–∞–∑–∏–∫
language = st.sidebar.selectbox("–à–∞–∑–∏–∫ / Language", ["–ú–∞–∫–µ–¥–æ–Ω—Å–∫–∏", "English"])

texts = {
    "title": {
        "–ú–∞–∫–µ–¥–æ–Ω—Å–∫–∏": "üìû –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–Ω–µ—Å–µ–Ω–∏ –ø—Ä–æ–ø—É—à—Ç–µ–Ω–∏ –ø–æ–≤–∏—Ü–∏",
        "English": "üìû Missed Calls System Check"
    },
    "upload": {
        "–ú–∞–∫–µ–¥–æ–Ω—Å–∫–∏": "‚¨ÜÔ∏è –ü—Ä–∏–∫–∞—á–∏ –≥–∏ Excel —Ñ–∞—ò–ª–æ–≤–∏—Ç–µ: Inbound, Outbound, Catpro",
        "English": "‚¨ÜÔ∏è Upload Inbound, Outbound, and Catpro Excel files"
    },
    "inbound": {"–ú–∞–∫–µ–¥–æ–Ω—Å–∫–∏": "üì• Inbound", "English": "üì• Inbound"},
    "outbound": {"–ú–∞–∫–µ–¥–æ–Ω—Å–∫–∏": "üì§ Outbound", "English": "üì§ Outbound"},
    "catpro": {"–ú–∞–∫–µ–¥–æ–Ω—Å–∫–∏": "üìä Catpro", "English": "üìä Catpro"},
    "count": {
        "–ú–∞–∫–µ–¥–æ–Ω—Å–∫–∏": "üìâ –í–∫—É–ø–Ω–æ {count} –ø—Ä–æ–ø—É—à—Ç–µ–Ω–∏ –±—Ä–æ–µ–≤–∏:",
        "English": "üìâ Total {count} missed numbers:"
    },
    "download": {"–ú–∞–∫–µ–¥–æ–Ω—Å–∫–∏": "‚¨áÔ∏è –ü—Ä–µ–∑–µ–º–∏ Excel", "English": "‚¨áÔ∏è Download Excel"},
    "info": {
        "–ú–∞–∫–µ–¥–æ–Ω—Å–∫–∏": "üìÇ –ü—Ä–∏–∫–∞—á–∏ –≥–∏ —Å–∏—Ç–µ —Ç—Ä–∏ —Ñ–∞—ò–ª–∞ –∑–∞ –¥–∞ –∑–∞–ø–æ—á–Ω–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–∞.",
        "English": "üìÇ Please upload all three files to start the analysis."
    },
    "test_number": {
        "–ú–∞–∫–µ–¥–æ–Ω—Å–∫–∏": "–¢–µ—Å—Ç–∏—Ä–∞–Ω –±—Ä–æ—ò –∑–∞ –≤–Ω–µ—Å–µ–Ω —Å—Ç–∞—Ç—É—Å:",
        "English": "Test number for insertion status:"
    }
}

st.set_page_config(page_title=texts["title"][language], layout="wide")
st.title(texts["title"][language])
st.markdown(texts["upload"][language])

# Upload —Ñ–∞—ò–ª–æ–≤–∏
inbound_file = st.sidebar.file_uploader(texts["inbound"][language], type=["xlsx"])
outbound_file = st.sidebar.file_uploader(texts["outbound"][language], type=["xlsx"])
catpro_file = st.sidebar.file_uploader(texts["catpro"][language], type=["xlsx"])

# –§—É–Ω–∫—Ü–∏—ò–∞ –∑–∞ —á–∏—Å—Ç–µ—ö–µ –±—Ä–æ–µ–≤–∏
def clean_number(number):
    if pd.isna(number):
        return ""
    number = str(number)
    number = re.sub(r"[^\d]", "", number)
    if number.startswith("00389"):
        number = number[5:]
    elif number.startswith("389"):
        number = number[3:]
    elif number.startswith("0"):
        number = number[1:]
    return number

if inbound_file and outbound_file and catpro_file:
    # –í—á–∏—Ç—É–≤–∞—ö–µ –Ω–∞ —Ñ–∞—ò–ª–æ–≤–∏
    df_in = pd.read_excel(inbound_file)
    df_out = pd.read_excel(outbound_file)
    df_cat = pd.read_excel(catpro_file, header=1)

    # 1. –ß–∏—Å—Ç–µ—ö–µ inbound –±—Ä–æ–µ–≤–∏ –∏ –≥—Ä—É–ø–∏—Ä–∞—ö–µ –ø–æ –ø–æ—Å–ª–µ–¥–µ–Ω –ø–æ–≤–∏–∫
    df_in['Cleaned Number'] = df_in['Original Caller Number'].apply(clean_number)
    df_in = df_in.sort_values('Start Time').drop_duplicates('Cleaned Number', keep='last')

    # 2. –ß–∏—Å—Ç–µ—ö–µ outbound –±—Ä–æ–µ–≤–∏
    df_out['Cleaned Number'] = df_out['Callee Number'].apply(clean_number)

    # 3. –ß–∏—Å—Ç–µ—ö–µ Catpro (GSM –∏ –∞–≥–µ–Ω—Ç)
    df_cat = df_cat[df_cat['GSM'].notna()]  # –û—Ç—Å—Ç—Ä–∞–Ω–∏ —Ä–µ–¥–æ–≤–∏ –±–µ–∑ GSM
    df_cat['Cleaned GSM'] = df_cat['GSM'].apply(clean_number)
    valid_gsm_set = set(df_cat['Cleaned GSM'].dropna())

    gsm_to_agent = df_cat.set_index('Cleaned GSM')['Agent of insertion'].to_dict()

    # 4. –ü—Ä–æ–ø—É—à—Ç–µ–Ω–∏ –ø–æ–≤–∏—Ü–∏ = inbound –±—Ä–æ–µ–≤–∏ —à—Ç–æ –≥–∏ –Ω–µ–º–∞ –≤–æ outbound
    missed = df_in[~df_in['Cleaned Number'].isin(df_out['Cleaned Number'])].copy()

    # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ –±—Ä–æ—ò–æ—Ç –µ –≤–Ω–µ—Å–µ–Ω –≤–æ —Å–∏—Å—Ç–µ–º (–¥–∞–ª–∏ –ø–æ—Å—Ç–æ–∏ –≤–æ Catpro)
    missed['Status'] = missed['Cleaned Number'].apply(
        lambda num: "‚úÖ –í–Ω–µ—Å–µ–Ω –≤–æ —Å–∏—Å—Ç–µ–º" if num in valid_gsm_set else "‚ùå –ù–ï –µ –≤–Ω–µ—Å–µ–Ω"
    )
    missed['Agent'] = missed['Cleaned Number'].apply(
        lambda num: gsm_to_agent.get(num, "") if num in valid_gsm_set else ""
    )

    # 6. –§–∏–Ω–∞–ª–Ω–∞ —Ç–∞–±–µ–ª–∞
    final_table = missed[[
        'Original Caller Number',
        'Start Time',
        'Source Trunk Name',
        'Status',
        'Agent'
    ]].rename(columns={
        'Original Caller Number': 'Phone',
        'Start Time': 'Date',
        'Source Trunk Name': 'Trunk'
    })

    # –ü—Ä–∏–∫–∞–∑ –≤–æ Streamlit
    st.subheader(texts["count"][language].format(count=len(final_table)))
    st.dataframe(final_table)

    # Export –≤–æ Excel
    output = BytesIO()
    final_table.to_excel(output, index=False, engine='openpyxl')
    output.seek(0)

    st.download_button(
        label=texts["download"][language],
        data=output,
        file_name="missed_calls_status.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )

    # --- –¢–µ—Å—Ç–∏—Ä–∞—ö–µ –Ω–∞ —Ñ–∏–∫—Å–µ–Ω –±—Ä–æ—ò –∑–∞ –≤–Ω–µ—Å–µ–Ω —Å—Ç–∞—Ç—É—Å ---
    test_number_raw = st.text_input(texts["test_number"][language], value="070123456")
    test_number = clean_number(test_number_raw)

    if st.button("–ü—Ä–æ–≤–µ—Ä–∏ —Å—Ç–∞—Ç—É—Å"):
        if test_number in valid_gsm_set:
            agent_name = gsm_to_agent.get(test_number, "–ê–≥–µ–Ω—Ç–æ—Ç –Ω–µ –µ –ø—Ä–æ–Ω–∞—ò–¥–µ–Ω")
            st.success(f"–ë—Ä–æ—ò–æ—Ç {test_number_raw} –ï –í–ù–ï–°–ï–ù –≤–æ —Å–∏—Å—Ç–µ–º.\n–ê–≥–µ–Ω—Ç: {agent_name}")
        else:
            st.error(f"–ë—Ä–æ—ò–æ—Ç {test_number_raw} –ù–ï –ï –≤–Ω–µ—Å–µ–Ω –≤–æ —Å–∏—Å—Ç–µ–º.")

else:
    st.info(texts["info"][language])
