import streamlit as st
import pandas as pd
from io import BytesIO
import re

# –à–∞–∑–∏–∫
language = st.sidebar.selectbox("Select language / –ò–∑–±–µ—Ä–∏ —ò–∞–∑–∏–∫", ["–ú–∞–∫–µ–¥–æ–Ω—Å–∫–∏", "English"])
texts = {
    "title": {
        "–ú–∞–∫–µ–¥–æ–Ω—Å–∫–∏": "üìû –ê–Ω–∞–ª–∏–∑–∞ –Ω–∞ –ø—Ä–æ–ø—É—à—Ç–µ–Ω–∏ –ø–æ–≤–∏—Ü–∏",
        "English": "üìû Missed Calls Analysis"
    },
    "upload_markdown": {
        "–ú–∞–∫–µ–¥–æ–Ω—Å–∫–∏": "‚¨ÜÔ∏è –ü—Ä–∏–∫–∞—á–∏ –≥–∏ —Ç—Ä–∏—Ç–µ Excel —Ñ–∞—ò–ª–æ–≤–∏ (–¥–æ—ò–¥–æ–≤–Ω–∏, –ø–æ—ò–¥–æ–≤–Ω–∏, Catpro)",
        "English": "‚¨ÜÔ∏è Upload all three Excel files (inbound, outbound, Catpro)"
    },
    "upload_inbound": {
        "–ú–∞–∫–µ–¥–æ–Ω—Å–∫–∏": "üì• Inbound —Ñ–∞—ò–ª (–¥–æ—ò–¥–æ–≤–Ω–∏ –ø–æ–≤–∏—Ü–∏)",
        "English": "üì• Inbound file (incoming calls)"
    },
    "upload_outbound": {
        "–ú–∞–∫–µ–¥–æ–Ω—Å–∫–∏": "üì§ Outbound —Ñ–∞—ò–ª (–ø–æ—ò–¥–æ–≤–Ω–∏ –ø–æ–≤–∏—Ü–∏)",
        "English": "üì§ Outbound file (outgoing calls)"
    },
    "upload_catpro": {
        "–ú–∞–∫–µ–¥–æ–Ω—Å–∫–∏": "üìä Catpro –∏–∑–≤–µ—à—Ç–∞—ò",
        "English": "üìä Catpro report"
    },
    "missed_calls_subheader": {
        "–ú–∞–∫–µ–¥–æ–Ω—Å–∫–∏": "üìâ –í–∫—É–ø–Ω–æ {count} –ø—Ä–æ–ø—É—à—Ç–µ–Ω–∏ –ø–æ–≤–∏—Ü–∏ :",
        "English": "üìâ Total {count} missed calls:"
    },
    "download_button": {
        "–ú–∞–∫–µ–¥–æ–Ω—Å–∫–∏": "‚¨áÔ∏è –ü—Ä–µ–∑–µ–º–∏ —Ñ–∏–Ω–∞–ª–Ω–∞ —Ç–∞–±–µ–ª–∞",
        "English": "‚¨áÔ∏è Download final table"
    },
    "info_upload_files": {
        "–ú–∞–∫–µ–¥–æ–Ω—Å–∫–∏": "üìÇ –ü—Ä–∏–∫–∞—á–∏ –≥–∏ —Å–∏—Ç–µ —Ç—Ä–∏ —Ñ–∞—ò–ª–∞ –∑–∞ –¥–∞ –∑–∞–ø–æ—á–Ω–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–∞.",
        "English": "üìÇ Please upload all three files to start analysis."
    }
}

# UI
st.set_page_config(page_title=texts["title"][language], layout="wide")
st.title(texts["title"][language])
st.markdown(texts["upload_markdown"][language])

# Upload –Ω–∞ 3 —Ñ–∞—ò–ª–∞
inbound_file = st.sidebar.file_uploader(texts["upload_inbound"][language], type=["xlsx"])
outbound_file = st.sidebar.file_uploader(texts["upload_outbound"][language], type=["xlsx"])
catpro_file = st.sidebar.file_uploader(texts["upload_catpro"][language], type=["xlsx"])

# –ê–∫–æ —Å–∏—Ç–µ —Ñ–∞—ò–ª–æ–≤–∏ —Å–µ –ø—Ä–∏–∫–∞—á–µ–Ω–∏
if inbound_file and outbound_file and catpro_file:
    # –ß–∏—Ç–∞—ö–µ
    df_in = pd.read_excel(inbound_file)
    df_out = pd.read_excel(outbound_file)
    df_cat = pd.read_excel(catpro_file, header=1)  # –í—Ç–æ—Ä —Ä–µ–¥ –µ —Ö–µ–¥–µ—Ä

    # –ß–∏—Å—Ç–µ—ö–µ –±—Ä–æ–µ–≤–∏
    def clean_number(number):
        if pd.isna(number):
            return ""
        number = str(number)
        number = re.sub(r"[^\d]", "", number)
        if number.startswith("00389"):
            number = number[5:]
        elif number.startswith("389"):
            number = number[3:]
        return number[-7:]  # –∑–µ–º–∏ –≥–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ç–µ 7 —Ü–∏—Ñ—Ä–∏ –∑–∞ —Å–∏–≥—É—Ä–Ω–æ—Å—Ç

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –Ω–∞ inbound –∏ outbound
    df_in = df_in[['Original Caller Number', 'Start Time', 'Source Trunk Name']].drop_duplicates(subset='Original Caller Number')
    df_in['Cleaned Number'] = df_in['Original Caller Number'].apply(clean_number)
    df_out['Cleaned Outbound'] = df_out['Callee Number'].apply(clean_number)

    # Catpro
    df_cat['Cleaned GSM'] = df_cat['GSM'].apply(clean_number)

    # –ü—Ä–æ–ø—É—à—Ç–µ–Ω–∏: –±—Ä–æ–µ–≤–∏ —à—Ç–æ –≥–∏ –∏–º–∞ –≤–æ inbound, –∞ –Ω–µ –≤–æ outbound
    missed = df_in[~df_in['Cleaned Number'].isin(df_out['Cleaned Outbound'])]

    # Merge —Å–æ Catpro –ø–æ Cleaned Number
    final = pd.merge(
        missed,
        df_cat[['Cleaned GSM', 'Agent of insertion', 'Answer', 'GSM']],
        left_on='Cleaned Number',
        right_on='Cleaned GSM',
        how='left'
    )

    # –§–∏–Ω–∞–ª–Ω–∞ —Ç–∞–±–µ–ª–∞
    final_table = final[[
        'Original Caller Number',
        'Start Time',
        'Source Trunk Name',
        'GSM',
        'Agent of insertion',
        'Answer'
    ]]

    final_table.rename(columns={
        'Original Caller Number': 'Phone',
        'Start Time': 'Date',
        'Source Trunk Name': 'Trunk',
        'Agent of insertion': 'Agent',
        'Answer': 'Last contact'
    }, inplace=True)

    # ‚úÖ Debug preview –∞–∫–æ –∏–º–∞ –ø—Ä–∞–∑–Ω–∏ –ø–æ–ª–∏—ö–∞
    st.write("‚¨áÔ∏è –ü—Ä–≤–∏—Ç–µ 10 —Ä–µ–¥–∞ –æ–¥ —Ñ–∏–Ω–∞–ª–Ω–∞—Ç–∞ —Ç–∞–±–µ–ª–∞:")
    st.dataframe(final_table.head(10))

    # üìä –ü—Ä–∏–∫–∞–∑
    st.subheader(texts["missed_calls_subheader"][language].format(count=len(final_table)))
    st.dataframe(final_table)

    # üì• –ü—Ä–µ–∑–µ–º–∞—ö–µ –∫–∞–∫–æ Excel
    output = BytesIO()
    final_table.to_excel(output, index=False, engine='openpyxl')
    output.seek(0)

    st.download_button(
        label=texts["download_button"][language],
        data=output,
        file_name="missed_calls_final.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )

    # Debug - —Å–ø–æ—Ä–µ–¥–±–∞ –Ω–∞ –±—Ä–æ–µ–≤–∏ –∞–∫–æ –Ω–∏—à—Ç–æ –Ω–µ —Å–µ –ø–æ–∫–ª–æ–ø—É–≤–∞
    if final_table['Agent'].isna().all():
        st.warning("‚ö†Ô∏è –ù–∏–µ–¥–µ–Ω –±—Ä–æ—ò –Ω–µ —Å–µ —Å–æ–≤–ø–∞–¥–Ω–∞ —Å–æ Catpro –ø–æ–¥–∞—Ç–æ—Ü–∏—Ç–µ. –ü—Ä–æ–≤–µ—Ä–∏ –¥–∞–ª–∏ –±—Ä–æ—ò–∫–∏—Ç–µ —Å–µ –≤–æ –∏—Å—Ç —Ñ–æ—Ä–º–∞—Ç.")
        st.write("–ü—Ä–∏–º–µ—Ä Cleaned Number –æ–¥ missed:", missed['Cleaned Number'].unique()[:10])
        st.write("–ü—Ä–∏–º–µ—Ä Cleaned GSM –æ–¥ Catpro:", df_cat['Cleaned GSM'].unique()[:10])

else:
    st.info(texts["info_upload_files"][language])
